name: CI — Build & Push Images + Frontend Deploy (Optimized)

on:
  push:
    branches:
      - 'feature/*'
      - staging
      - main

permissions:
  contents: read

jobs:
  ##################################
  # 🐳 Backend Build & Image Push (with ECR Registry Cache)
  ##################################
  build-and-push-backend:
    runs-on: ubuntu-latest
    environment: staging
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO: ${{ secrets.ECR_REPOSITORY }}

    outputs:
      image_sha_tag: ${{ steps.tags.outputs.IMAGE_SHA_TAG }}
      image_branch_tag: ${{ steps.tags.outputs.IMAGE_BRANCH_TAG }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tags
        id: tags
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          SHORT_SHA=${GITHUB_SHA::8}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            BR_TAG="prod-latest"
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            BR_TAG="staging-latest"
          else
            SAFE_BRANCH=$(echo "$BRANCH_NAME" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
            BR_TAG="feature-${SAFE_BRANCH}-latest"
          fi
          IMAGE_SHA_TAG="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${GITHUB_SHA}"
          IMAGE_BRANCH_TAG="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${BR_TAG}"
          echo "IMAGE_SHA_TAG=$IMAGE_SHA_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_BRANCH_TAG=$IMAGE_BRANCH_TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend Docker image (with registry cache)
        uses: docker/build-push-action@v6
        with:
          context: ./server
          push: true
          tags: |
            ${{ steps.tags.outputs.IMAGE_SHA_TAG }}
            ${{ steps.tags.outputs.IMAGE_BRANCH_TAG }}
          cache-from: type=registry,ref=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:buildcache,mode=max

  ##################################
  # 🧪 Trivy — Scan Backend Image
  ##################################
  trivy-backend-scan:
    runs-on: ubuntu-latest
    needs: build-and-push-backend
    steps:
      - name: Install Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: ${{ needs.build-and-push-backend.outputs.image_branch_tag }}
          ignore-unfixed: true
          vuln-type: os,library
          format: table

  ##################################
  # 🎨 Frontend Dependency Scan
  ##################################
  trivy-frontend-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Trivy Scan for Node.js dependencies
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          path: ./client
          format: table
          vuln-type: library
          ignore-unfixed: true

  ##################################
  # 🚀 Deploy Stage (After Scans)
  ##################################
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [trivy-backend-scan, trivy-frontend-scan]
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Deployment placeholder
        run: echo "✅ Scans passed — ready for staging deployment."
